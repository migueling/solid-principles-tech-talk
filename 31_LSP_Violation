// Liskov Substitution Principle - Violation

class Bird {
    public void eat() {
        System.out.println("Bird is eating");
    }

    public void fly() {
        System.out.println("Bird is flying");
    }
}

class Sparrow extends Bird {
    @Override
    public void eat() {
        System.out.println("Sparrow is eating");
    }

    @Override
    public void fly() {
        System.out.println("Sparrow is flying");
    }
}

class Penguin extends Bird {
    @Override
    public void eat() {
        System.out.println("Penguin is eating");
    }

    @Override
    public void fly() {
        throw new UnsupportedOperationException("Penguins can't fly");
    }
}

// Usage

public class Main {
    public static void releaseAllBirds(List<Bird> birds) {
        for (Bird bird : birds) {
            bird.fly();
        }
    }

    public static void main(String[] args) {
        Bird sparrow = new Sparrow();
        Bird penguin = new Penguin();

        List<Bird> birds = new ArrayList<>();
        birds.add(sparrow);
        birds.add(penguin);

        releaseAllBirds(birds);
    }
}